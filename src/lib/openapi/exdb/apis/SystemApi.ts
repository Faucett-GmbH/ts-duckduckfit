/* tslint:disable */
/* eslint-disable */
/**
 * DuckDuckFit Exercise Database API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: contact@duckduckfit.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HealthCheck,
  Locale,
  Version,
} from '../models/index';
import {
    HealthCheckFromJSON,
    HealthCheckToJSON,
    LocaleFromJSON,
    LocaleToJSON,
    VersionFromJSON,
    VersionToJSON,
} from '../models/index';

/**
 * SystemApi - interface
 * 
 * @export
 * @interface SystemApiInterface
 */
export interface SystemApiInterface {
    /**
     * Get server health status
     * @summary GetHealth
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApiInterface
     */
    getHealthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthCheck>>;

    /**
     * Get server health status
     * GetHealth
     */
    getHealth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthCheck>;

    /**
     * Get supported locales
     * @summary GetLocales
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApiInterface
     */
    getLocalesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Locale>>>;

    /**
     * Get supported locales
     * GetLocales
     */
    getLocales(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Locale>>;

    /**
     * Get supported timezones
     * @summary GetTimezones
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApiInterface
     */
    getTimezonesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Get supported timezones
     * GetTimezones
     */
    getTimezones(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>>;

    /**
     * Get the version of the application
     * @summary GetVersion
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApiInterface
     */
    getVersionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Version>>;

    /**
     * Get the version of the application
     * GetVersion
     */
    getVersion(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Version>;

}

/**
 * 
 */
export class SystemApi extends runtime.BaseAPI implements SystemApiInterface {

    /**
     * Get server health status
     * GetHealth
     */
    async getHealthRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthCheck>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/system/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthCheckFromJSON(jsonValue));
    }

    /**
     * Get server health status
     * GetHealth
     */
    async getHealth(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthCheck> {
        const response = await this.getHealthRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get supported locales
     * GetLocales
     */
    async getLocalesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Locale>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/system/locales`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LocaleFromJSON));
    }

    /**
     * Get supported locales
     * GetLocales
     */
    async getLocales(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Locale>> {
        const response = await this.getLocalesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get supported timezones
     * GetTimezones
     */
    async getTimezonesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/system/timezones`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Get supported timezones
     * GetTimezones
     */
    async getTimezones(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getTimezonesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get the version of the application
     * GetVersion
     */
    async getVersionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Version>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/system/version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFromJSON(jsonValue));
    }

    /**
     * Get the version of the application
     * GetVersion
     */
    async getVersion(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Version> {
        const response = await this.getVersionRaw(initOverrides);
        return await response.value();
    }

}
