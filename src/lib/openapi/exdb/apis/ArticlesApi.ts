/* tslint:disable */
/* eslint-disable */
/**
 * DuckDuckFit Exercise Database API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: contact@duckduckfit.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Article,
  GetArticles200Response,
  GetExerciseById400Response,
} from '../models/index';
import {
    ArticleFromJSON,
    ArticleToJSON,
    GetArticles200ResponseFromJSON,
    GetArticles200ResponseToJSON,
    GetExerciseById400ResponseFromJSON,
    GetExerciseById400ResponseToJSON,
} from '../models/index';

export interface GetArticleByIdRequest {
    xLocale: string;
    id: number;
}

export interface GetArticlesRequest {
    xLocale: string;
    limit?: number;
    offset?: number;
}

/**
 * ArticlesApi - interface
 * 
 * @export
 * @interface ArticlesApiInterface
 */
export interface ArticlesApiInterface {
    /**
     * Get an article by its ID
     * @summary GetArticleById
     * @param {string} xLocale 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApiInterface
     */
    getArticleByIdRaw(requestParameters: GetArticleByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Article>>;

    /**
     * Get an article by its ID
     * GetArticleById
     */
    getArticleById(xLocale: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Article>;

    /**
     * Get articles with search and pagination
     * @summary GetArticles
     * @param {string} xLocale 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ArticlesApiInterface
     */
    getArticlesRaw(requestParameters: GetArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetArticles200Response>>;

    /**
     * Get articles with search and pagination
     * GetArticles
     */
    getArticles(xLocale: string, limit?: number, offset?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetArticles200Response>;

}

/**
 * 
 */
export class ArticlesApi extends runtime.BaseAPI implements ArticlesApiInterface {

    /**
     * Get an article by its ID
     * GetArticleById
     */
    async getArticleByIdRaw(requestParameters: GetArticleByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Article>> {
        if (requestParameters['xLocale'] == null) {
            throw new runtime.RequiredError(
                'xLocale',
                'Required parameter "xLocale" was null or undefined when calling getArticleById().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getArticleById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xLocale'] != null) {
            headerParameters['X-Locale'] = String(requestParameters['xLocale']);
        }

        const response = await this.request({
            path: `/articles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ArticleFromJSON(jsonValue));
    }

    /**
     * Get an article by its ID
     * GetArticleById
     */
    async getArticleById(xLocale: string, id: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Article> {
        const response = await this.getArticleByIdRaw({ xLocale: xLocale, id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get articles with search and pagination
     * GetArticles
     */
    async getArticlesRaw(requestParameters: GetArticlesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetArticles200Response>> {
        if (requestParameters['xLocale'] == null) {
            throw new runtime.RequiredError(
                'xLocale',
                'Required parameter "xLocale" was null or undefined when calling getArticles().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xLocale'] != null) {
            headerParameters['X-Locale'] = String(requestParameters['xLocale']);
        }

        const response = await this.request({
            path: `/articles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetArticles200ResponseFromJSON(jsonValue));
    }

    /**
     * Get articles with search and pagination
     * GetArticles
     */
    async getArticles(xLocale: string, limit?: number, offset?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetArticles200Response> {
        const response = await this.getArticlesRaw({ xLocale: xLocale, limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }

}
