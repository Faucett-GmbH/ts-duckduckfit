/* tslint:disable */
/* eslint-disable */
/**
 * DuckDuckFit Exercise Database API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: contact@duckduckfit.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExerciseContainer,
  GetExerciseById400Response,
  GetExerciseById404Response,
  GetExercises200Response,
  GetExercises400Response,
} from '../models/index';
import {
    ExerciseContainerFromJSON,
    ExerciseContainerToJSON,
    GetExerciseById400ResponseFromJSON,
    GetExerciseById400ResponseToJSON,
    GetExerciseById404ResponseFromJSON,
    GetExerciseById404ResponseToJSON,
    GetExercises200ResponseFromJSON,
    GetExercises200ResponseToJSON,
    GetExercises400ResponseFromJSON,
    GetExercises400ResponseToJSON,
} from '../models/index';

export interface GetExerciseByIdRequest {
    xLocale: string;
    id: string;
}

export interface GetExercisesRequest {
    xLocale: string;
    ids?: Array<string> | null;
    search?: string | null;
    limit?: number;
    offset?: number;
}

/**
 * ExercisesApi - interface
 * 
 * @export
 * @interface ExercisesApiInterface
 */
export interface ExercisesApiInterface {
    /**
     * Get an exercise by its ID
     * @summary GetExerciseById
     * @param {string} xLocale 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApiInterface
     */
    getExerciseByIdRaw(requestParameters: GetExerciseByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExerciseContainer>>;

    /**
     * Get an exercise by its ID
     * GetExerciseById
     */
    getExerciseById(xLocale: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExerciseContainer>;

    /**
     * Get exercises with pagination
     * @summary GetExercises
     * @param {string} xLocale 
     * @param {Array<string>} [ids] 
     * @param {string} [search] 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExercisesApiInterface
     */
    getExercisesRaw(requestParameters: GetExercisesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetExercises200Response>>;

    /**
     * Get exercises with pagination
     * GetExercises
     */
    getExercises(xLocale: string, ids?: Array<string> | null, search?: string | null, limit?: number, offset?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetExercises200Response>;

}

/**
 * 
 */
export class ExercisesApi extends runtime.BaseAPI implements ExercisesApiInterface {

    /**
     * Get an exercise by its ID
     * GetExerciseById
     */
    async getExerciseByIdRaw(requestParameters: GetExerciseByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExerciseContainer>> {
        if (requestParameters['xLocale'] == null) {
            throw new runtime.RequiredError(
                'xLocale',
                'Required parameter "xLocale" was null or undefined when calling getExerciseById().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getExerciseById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xLocale'] != null) {
            headerParameters['X-Locale'] = String(requestParameters['xLocale']);
        }

        const response = await this.request({
            path: `/exercises/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExerciseContainerFromJSON(jsonValue));
    }

    /**
     * Get an exercise by its ID
     * GetExerciseById
     */
    async getExerciseById(xLocale: string, id: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExerciseContainer> {
        const response = await this.getExerciseByIdRaw({ xLocale: xLocale, id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get exercises with pagination
     * GetExercises
     */
    async getExercisesRaw(requestParameters: GetExercisesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetExercises200Response>> {
        if (requestParameters['xLocale'] == null) {
            throw new runtime.RequiredError(
                'xLocale',
                'Required parameter "xLocale" was null or undefined when calling getExercises().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xLocale'] != null) {
            headerParameters['X-Locale'] = String(requestParameters['xLocale']);
        }

        const response = await this.request({
            path: `/exercises`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetExercises200ResponseFromJSON(jsonValue));
    }

    /**
     * Get exercises with pagination
     * GetExercises
     */
    async getExercises(xLocale: string, ids?: Array<string> | null, search?: string | null, limit?: number, offset?: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetExercises200Response> {
        const response = await this.getExercisesRaw({ xLocale: xLocale, ids: ids, search: search, limit: limit, offset: offset }, initOverrides);
        return await response.value();
    }

}
